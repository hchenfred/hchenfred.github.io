<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Huan Chen</title>
    <link>https://hchenfred.github.io/post/</link>
    <description>Recent content in Posts on Huan Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Your Name</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Hide a variable in a Javascript Function</title>
      <link>https://hchenfred.github.io/post/hidejavascriptvariable/</link>
      <pubDate>Wed, 21 Jun 2017 09:29:48 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/hidejavascriptvariable/</guid>
      <description>

&lt;h3 id=&#34;how-to-hide-a-variable-in-a-javascript-function&#34;&gt;How to Hide a variable in a Javascript Function&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;My initial reaction was to use a IFFE to hide a variable in a Javascript function so that the variable won&amp;rsquo;t be modified.&lt;/li&gt;
&lt;li&gt;The correct way is to use a closure. I was able to come up with the idea but it took me some time to figure out how to code it.&lt;/li&gt;
&lt;li&gt;Also, I learned from Interviewer a great website to improve Javascript skills &lt;a href=&#34;http://superherojs.com/#language&#34; target=&#34;_blank&#34;&gt;http://superherojs.com/#language&lt;/a&gt;
```javascript
const Counter = function() {
let state = 0;
this.getState = function() {
return state;
}
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this.inc = function() {
    state++;
    return state;
  }
   this.dec = function() {
    state&amp;ndash;;
    return state;
  }
}&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tree</title>
      <link>https://hchenfred.github.io/post/tree/</link>
      <pubDate>Sun, 18 Jun 2017 10:01:47 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/tree/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Binary Search</title>
      <link>https://hchenfred.github.io/post/binarysearch/</link>
      <pubDate>Sat, 17 Jun 2017 10:15:45 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/binarysearch/</guid>
      <description>

&lt;h1 id=&#34;binary-search&#34;&gt;Binary Search&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Given a sorted array, find any/first/last element in the array&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Time complexity T(n) = T(n/2) + O(1)
                    = T(n/4) + O(1) + O(1)
                    = T(n/8) + O(1) + O(1) + O(1) = &amp;hellip;.. = O(logn)&lt;/p&gt;

&lt;h2 id=&#34;how-to-implement-binary-search&#34;&gt;How to implement binary search?&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use while loop&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What&amp;rsquo;s the condition in while loop?
start + 1 &amp;lt; end (vary important)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;How to calculate mid point?
mid = start + Math.floor((end - start)/2);&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Implement a LRU Cache</title>
      <link>https://hchenfred.github.io/post/lru/</link>
      <pubDate>Sat, 17 Jun 2017 08:15:41 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/lru/</guid>
      <description>

&lt;h2 id=&#34;lru-cache&#34;&gt;LRU Cache&lt;/h2&gt;

&lt;p&gt;Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.&lt;/p&gt;

&lt;p&gt;get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.&lt;/p&gt;

&lt;p&gt;Follow up:
Could you do both operations in O(1) time complexity?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How can we do get(key) in O(1)?
We think of a hash table&lt;/li&gt;
&lt;li&gt;How can we do put(key, value) in O(1)?
Hash table. However, we need to keep track of the least recently used item so that we can delete it when the cache reaches its capacity. How can we keep track of the least recently used item? We think of a doubly linked list that allows us to move element in constant time&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>This is a leetcode problem 133 Clone Graph</title>
      <link>https://hchenfred.github.io/post/clonegraph/</link>
      <pubDate>Fri, 16 Jun 2017 16:45:29 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/clonegraph/</guid>
      <description>

&lt;h2 id=&#34;clone-an-undirected-graph-each-node-in-the-graph-contains-a-label-and-a-list-of-its-neighbors&#34;&gt;Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;use BFS to solve this problem.&lt;/li&gt;
&lt;li&gt;use a Map in javascript to store a mapping between nodes in original graph and nodes in new graph.&lt;/li&gt;
&lt;li&gt;when using BFS to traverse the original graph, if a neighbor is already in the map, it means the corresponding node has been created and we just need to connect two nodes in the new graph&lt;/li&gt;
&lt;li&gt;when using BFS to traverse the original graph, if a neighbor isn&amp;rsquo;t in the map, we create a new node in the new graph, push the neighbor in the queue and connect two nodes in the new graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
 * @param {UndirectedGraphNode} graph
 * @return {UndirectedGraphNode}
 */
var cloneGraph = function(graph) {
    if (graph === null) {
        return null;
    }
    //bfs
    var queue = [];
    queue.push(graph);
    var map = new Map();
    var head = new UndirectedGraphNode(graph.label);
    map.set(graph, head);
    
    while (queue.length !== 0) {
        var curr = queue.shift();
        // console.log(curr);
        var neighbors = curr.neighbors;
        for (var i = 0; i &amp;lt; neighbors.length; i++) {
            var neighbor = neighbors[i];
            // this neighbor has not been visited
            if (map.get(neighbor) === undefined) {
                var copyNeighbor = new UndirectedGraphNode(neighbor.label);
                map.set(neighbor, copyNeighbor);
                map.get(curr).neighbors.push(copyNeighbor);
                queue.push(neighbor);
            // this neighbor has been visited
            } else {
               map.get(curr).neighbors.push(map.get(neighbor));
            }
        }
    }
    
    return head;
};
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ten JavaScript Questions</title>
      <link>https://hchenfred.github.io/post/10javascriptquestions/</link>
      <pubDate>Fri, 16 Jun 2017 08:58:15 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/10javascriptquestions/</guid>
      <description>

&lt;h2 id=&#34;ten-javascript-questions&#34;&gt;Ten JavaScript Questions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Differences between keyword var and let&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;let was introduced in ES6, old browsers won&amp;rsquo;t support it, var has been around for a long time&lt;/li&gt;
&lt;li&gt;let is block scoped while var is function scoped. When a var variable is declared in a block, you can still access it outside the block&lt;/li&gt;
&lt;li&gt;let is not hoisted while var is hoisted&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Differences between &amp;lsquo;undefined&amp;rsquo; and &amp;lsquo;null&amp;rsquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;undefined means a variable is declared but never assigned to a value&lt;/li&gt;
&lt;li&gt;null means a variable is declared and you assigned a value null to indicate that it is empty or it does not have anything.&lt;/li&gt;
&lt;li&gt;typeof(undefined) === &amp;lsquo;undefined&amp;rsquo; typeof(null) === &amp;lsquo;object&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is arrow function?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is a ES6 feature.&lt;/li&gt;
&lt;li&gt;it doesn&amp;rsquo;t create a new scope as normal functions do. Instead, it shares the same scope with its first outer function. It helps to avoid the issue with keyword &amp;lsquo;this&amp;rsquo; not being the object that is intended.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;What is prototypal inheritance?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In JavaScript, all functions are objects. And they all have a property called &amp;lsquo;prototype&amp;rsquo;&lt;/li&gt;
&lt;li&gt;You can add methods to &amp;lsquo;prototype&amp;rsquo;&lt;/li&gt;
&lt;li&gt;when you create instance objects from constructor functions, those instance object will inherit the methods from constructor&amp;rsquo;s prototype
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Throttle vs. Debounce</title>
      <link>https://hchenfred.github.io/post/throttle/</link>
      <pubDate>Tue, 13 Jun 2017 08:52:24 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/throttle/</guid>
      <description>

&lt;h2 id=&#34;what-is-throttle&#34;&gt;What is Throttle?&lt;/h2&gt;

&lt;p&gt;Throttling enforces the maximum number of time a function can be called over time.
Let&amp;rsquo;s look at how to use throttle function in underscore.js library.
&lt;img src=&#34;https://hchenfred.github.io/img/throttle.png&#34; alt=&#34;Let&#39;s look at how to use throttle function in underscore.js library&#34; /&gt;
This is a simple implementation of throttle function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var throttle = (func, waitTime) =&amp;gt; {
  var wait = false;
  return function() {
    if (!wait) {
      func.call();
      setInterval(() =&amp;gt; {
        wait = true;
      }, waitTime);
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-is-debounce&#34;&gt;What is Debounce?&lt;/h2&gt;

&lt;p&gt;Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called.
&lt;img src=&#34;https://hchenfred.github.io/img/debounce.png&#34; alt=&#34;Let&#39;s look at how to use debounce function in underscore.js library&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function debounce(fn, delay) {
  var timer = null;
  return function () {
    var context = this, args = arguments;
    clearTimeout(timer);
    timer = setTimeout(function () {
      fn.apply(context, args);
    }, delay);
  };
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>What is REST?</title>
      <link>https://hchenfred.github.io/post/rest/</link>
      <pubDate>Tue, 06 Jun 2017 22:21:33 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/rest/</guid>
      <description>&lt;p&gt;What is REST?
It is just a mapping between HTTP routes and CRUD(Create, Read, Update and Destroy). It is a convention.
To illustrate how to create HTTP routes in back-end, a picture is necessary.
&lt;img src=&#34;https://hchenfred.github.io/img/rest.png&#34; alt=&#34;RESTFUL&#34; title=&#34;RESTFUL&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript DOM Selector and Manipulation</title>
      <link>https://hchenfred.github.io/post/javascriptdom/</link>
      <pubDate>Mon, 05 Jun 2017 12:05:28 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/javascriptdom/</guid>
      <description>

&lt;h2 id=&#34;dom-selector-method&#34;&gt;DOM Selector Method&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;document.getElementById()
returns one element with the id&lt;/li&gt;
&lt;li&gt;document.getElementsByClassName()
returns a node list (not an array)&lt;/li&gt;
&lt;li&gt;document.getElementsByTagName()
returns a node list (not an array)&lt;/li&gt;
&lt;li&gt;document.querySelector()
returns the first match&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dom-manipulation&#34;&gt;DOM Manipulation&lt;/h2&gt;

&lt;h3 id=&#34;change-style&#34;&gt;change style&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;el.style.color = &amp;lsquo;blue&amp;rsquo;;&lt;/li&gt;
&lt;li&gt;el.style.marginTop = &amp;lsquo;200px&amp;rsquo;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;change-css-class-to-an-element&#34;&gt;change CSS Class to an element&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;el.classList.add(&amp;lsquo;CSSclassname&amp;rsquo;);&lt;/li&gt;
&lt;li&gt;el.classList.remove(&amp;lsquo;CSSclassname&amp;rsquo;);&lt;/li&gt;
&lt;li&gt;el.classList.toggle(&amp;lsquo;CSSclassname&amp;rsquo;);&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is execution Context in Javascript?</title>
      <link>https://hchenfred.github.io/post/executioncontext/</link>
      <pubDate>Mon, 05 Jun 2017 09:36:53 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/executioncontext/</guid>
      <description>&lt;p&gt;Execution context is a very important concept in Javascript.
The article is for me to try to explain it so that it deepens my understanding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global Execution Context
Global Execution Context creates a global object (window object).
The &amp;lsquo;this&amp;rsquo; keyword in global execution context refers to the global object.
Global execution context is not inside a function&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hoisting&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>https://hchenfred.github.io/post/functional-programming/</link>
      <pubDate>Sun, 04 Jun 2017 18:41:44 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/functional-programming/</guid>
      <description>&lt;p&gt;What is functional programming?&lt;/p&gt;

&lt;p&gt;We have to remember one keyword – higher-order functions? what are higher-order functions?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;arr.filter(function(element) return element &amp;gt; 3;)
arr.map(function(element) return element * 2;)
arr.find(function(element) return element = 10;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions are pure functions. no side-effects.
For the same input, you always get the same output. For example, if a function’s output is calculated with Date(), then it is not a pure function. This is because every time you the the function, you will get a different output depending on the current Date and time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript Interview Questions</title>
      <link>https://hchenfred.github.io/post/getting-started/</link>
      <pubDate>Sat, 03 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>https://hchenfred.github.io/post/getting-started/</guid>
      <description>

&lt;h2 id=&#34;a-really-good-article-talking-about-what-a-front-end-engineer-needs-to-know-before-an-interview&#34;&gt;A really good article talking about what a front-end engineer needs to know before an interview.&lt;/h2&gt;

&lt;h3 id=&#34;what-happens-when-you-type-in-www-google-com-in-your-browser&#34;&gt;What happens when you type in www.google.com in your browser?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;when you want to connect to www.google.com, you need to get the IP address of the server where google web services are hosted. DNS (domain name system) resolves an URL to an IP address.

&lt;ul&gt;
&lt;li&gt;check browser cache: browsers maintain cache of DNS records for some fixed duration.&lt;/li&gt;
&lt;li&gt;check OS cache&lt;/li&gt;
&lt;li&gt;check router cache&lt;/li&gt;
&lt;li&gt;check ISP cache&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Browser initiates TCP connection with the server&lt;/li&gt;
&lt;li&gt;Browser sends a HTTP GET request to the server

&lt;ul&gt;
&lt;li&gt;GET request contains cookies, User-Agent and etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Server handles the request

&lt;ul&gt;
&lt;li&gt;HTML response is sent back to the client from corresponding request handler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Browser receives HTTP response&lt;/li&gt;
&lt;li&gt;Browser renders DOM and it sends GET request to request img or CSS files and etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;what-is-hoisting&#34;&gt;what is hoisting?&lt;/h3&gt;

&lt;p&gt;hoisting means move variable and function declarations to the top so you will be able to call a function or use a variable before its declaration
function declaration takes precedence on variable declaration&lt;/p&gt;

&lt;h3 id=&#34;difference-between-null-and-undefined&#34;&gt;Difference between ‘null’ and ‘undefined’&lt;/h3&gt;

&lt;p&gt;undefined means a variable is declared but not assigned a value yet
null means that programmers assign a null value to an object to represent there is none&lt;/p&gt;

&lt;h3 id=&#34;the-arguments-object&#34;&gt;The ‘arguments’ object&lt;/h3&gt;

&lt;p&gt;arguments is an array-like object that corresponds to the arguments passed in a function
How can we turn this array-like ‘argument’ to an actual array?
var args = Array.from(arguments);
var args = […arguments];&lt;/p&gt;

&lt;h3 id=&#34;what-is-iife-why-do-we-need-to-use-it&#34;&gt;What is IIFE? Why do we need to use it?&lt;/h3&gt;

&lt;p&gt;IIFE is immediately invoked function expression.
the variables defined in IIFE is only accessible within IIFE, it prevents ‘var’ from polluting the global.
in ES6, the keyword ‘let’ can be used to solve this problem&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
