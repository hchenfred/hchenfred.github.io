<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Huan Chen</title>
    <link>https://hchenfred.github.io/post/</link>
    <description>Recent content in Posts on Huan Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Your Name</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What is REST?</title>
      <link>https://hchenfred.github.io/post/rest/</link>
      <pubDate>Tue, 06 Jun 2017 22:21:33 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/rest/</guid>
      <description>&lt;p&gt;What is REST?
It is just a mapping between HTTP routes and CRUD(Create, Read, Update and Destroy). It is a convention.
To illustrate how to create HTTP routes in back-end, a picture is necessary.
&lt;img src=&#34;https://hchenfred.github.io/img/rest.png&#34; alt=&#34;RESTFUL&#34; title=&#34;RESTFUL&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript DOM Selector and Manipulation</title>
      <link>https://hchenfred.github.io/post/javascriptdom/</link>
      <pubDate>Mon, 05 Jun 2017 12:05:28 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/javascriptdom/</guid>
      <description>

&lt;h2 id=&#34;dom-selector-method&#34;&gt;DOM Selector Method&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;document.getElementById()
returns one element with the id&lt;/li&gt;
&lt;li&gt;document.getElementsByClassName()
returns a node list (not an array)&lt;/li&gt;
&lt;li&gt;document.getElementsByTagName()
returns a node list (not an array)&lt;/li&gt;
&lt;li&gt;document.querySelector()
returns the first match&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dom-manipulation&#34;&gt;DOM Manipulation&lt;/h2&gt;

&lt;h3 id=&#34;change-style&#34;&gt;change style&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;el.style.color = &amp;lsquo;blue&amp;rsquo;;&lt;/li&gt;
&lt;li&gt;el.style.marginTop = &amp;lsquo;200px&amp;rsquo;;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;change-css-class-to-an-element&#34;&gt;change CSS Class to an element&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;el.classList.add(&amp;lsquo;CSSclassname&amp;rsquo;);&lt;/li&gt;
&lt;li&gt;el.classList.remove(&amp;lsquo;CSSclassname&amp;rsquo;);&lt;/li&gt;
&lt;li&gt;el.classList.toggle(&amp;lsquo;CSSclassname&amp;rsquo;);&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is execution Context in Javascript?</title>
      <link>https://hchenfred.github.io/post/executioncontext/</link>
      <pubDate>Mon, 05 Jun 2017 09:36:53 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/executioncontext/</guid>
      <description>&lt;p&gt;Execution context is a very important concept in Javascript.
The article is for me to try to explain it so that it deepens my understanding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global Execution Context
Global Execution Context creates a global object (window object).
The &amp;lsquo;this&amp;rsquo; keyword in global execution context refers to the global object.
Global execution context is not inside a function&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hoisting&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>https://hchenfred.github.io/post/functional-programming/</link>
      <pubDate>Sun, 04 Jun 2017 18:41:44 -0700</pubDate>
      
      <guid>https://hchenfred.github.io/post/functional-programming/</guid>
      <description>&lt;p&gt;What is functional programming?&lt;/p&gt;

&lt;p&gt;We have to remember one keyword – higher-order functions? what are higher-order functions?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;arr.filter(function(element) return element &amp;gt; 3;)
arr.map(function(element) return element * 2;)
arr.find(function(element) return element = 10;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions are pure functions. no side-effects.
For the same input, you always get the same output. For example, if a function’s output is calculated with Date(), then it is not a pure function. This is because every time you the the function, you will get a different output depending on the current Date and time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript Interview Questions</title>
      <link>https://hchenfred.github.io/post/getting-started/</link>
      <pubDate>Sat, 03 Jun 2017 12:00:00 +0000</pubDate>
      
      <guid>https://hchenfred.github.io/post/getting-started/</guid>
      <description>&lt;p&gt;A really good article talking about what a front-end engineer needs to know before an interview.
- What happens when you type in www.google.com in your browser?
* when you want to connect to www.google.com, you need to get the IP address of the server where google web services are hosted. DNS (domain name system) resolves an URL to an IP address.
  * check browser cache: browsers maintain cache of DNS records for some fixed duration.
  * check OS cache
  * check router cache
  * check ISP cache
* Browser initiates TCP connection with the server
* Browser sends a HTTP GET request to the server
  * GET request contains cookies, User-Agent and etc.
* Server handles the request
  * HTML response is sent back to the client from corresponding request handler
* Browser receives HTTP response
* Browser renders DOM and it sends GET request to request img or CSS files and etc&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what is hoisting?
hoisting means move variable and function declarations to the top so you will be able to call a function or use a variable before its declaration
function declaration takes precedence on variable declaration&lt;/li&gt;
&lt;li&gt;Difference between ‘null’ and ‘undefined’
undefined means a variable is declared but not assigned a value yet
null means that programmers assign a null value to an object to represent there is none&lt;/li&gt;
&lt;li&gt;The ‘arguments’ object
arguments is an array-like object that corresponds to the arguments passed in a function
How can we turn this array-like ‘argument’ to an actual array?
var args = Array.from(arguments);
var args = […arguments];&lt;/li&gt;
&lt;li&gt;What is IIFE? Why do we need to use it?
IIFE is immediately invoked function expression.
the variables defined in IIFE is only accessible within IIFE, it prevents ‘var’ from polluting the global.
in ES6, the keyword ‘let’ can be used to solve this problem&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
